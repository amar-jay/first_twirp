// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: service.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AnswerQuestionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AnswerQuestionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnswerQuestionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnswerQuestionRequestMultiError, or nil if none found.
func (m *AnswerQuestionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AnswerQuestionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Openai

	// no validation rules for Question

	if len(errors) > 0 {
		return AnswerQuestionRequestMultiError(errors)
	}

	return nil
}

// AnswerQuestionRequestMultiError is an error wrapping multiple validation
// errors returned by AnswerQuestionRequest.ValidateAll() if the designated
// constraints aren't met.
type AnswerQuestionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnswerQuestionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnswerQuestionRequestMultiError) AllErrors() []error { return m }

// AnswerQuestionRequestValidationError is the validation error returned by
// AnswerQuestionRequest.Validate if the designated constraints aren't met.
type AnswerQuestionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnswerQuestionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnswerQuestionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnswerQuestionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnswerQuestionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnswerQuestionRequestValidationError) ErrorName() string {
	return "AnswerQuestionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AnswerQuestionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnswerQuestionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnswerQuestionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnswerQuestionRequestValidationError{}

// Validate checks the field values on AnswerQuestionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AnswerQuestionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnswerQuestionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnswerQuestionResponseMultiError, or nil if none found.
func (m *AnswerQuestionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AnswerQuestionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Answer

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnswerQuestionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnswerQuestionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnswerQuestionResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AnswerQuestionResponseMultiError(errors)
	}

	return nil
}

// AnswerQuestionResponseMultiError is an error wrapping multiple validation
// errors returned by AnswerQuestionResponse.ValidateAll() if the designated
// constraints aren't met.
type AnswerQuestionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnswerQuestionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnswerQuestionResponseMultiError) AllErrors() []error { return m }

// AnswerQuestionResponseValidationError is the validation error returned by
// AnswerQuestionResponse.Validate if the designated constraints aren't met.
type AnswerQuestionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnswerQuestionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnswerQuestionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnswerQuestionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnswerQuestionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnswerQuestionResponseValidationError) ErrorName() string {
	return "AnswerQuestionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AnswerQuestionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnswerQuestionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnswerQuestionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnswerQuestionResponseValidationError{}

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ErrorMultiError, or nil if none found.
func (m *Error) ValidateAll() error {
	return m.validate(true)
}

func (m *Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ErrorMultiError(errors)
	}

	return nil
}

// ErrorMultiError is an error wrapping multiple validation errors returned by
// Error.ValidateAll() if the designated constraints aren't met.
type ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorMultiError) AllErrors() []error { return m }

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}

// Validate checks the field values on RecommendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecommendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendRequestMultiError, or nil if none found.
func (m *RecommendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Question

	if len(errors) > 0 {
		return RecommendRequestMultiError(errors)
	}

	return nil
}

// RecommendRequestMultiError is an error wrapping multiple validation errors
// returned by RecommendRequest.ValidateAll() if the designated constraints
// aren't met.
type RecommendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendRequestMultiError) AllErrors() []error { return m }

// RecommendRequestValidationError is the validation error returned by
// RecommendRequest.Validate if the designated constraints aren't met.
type RecommendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendRequestValidationError) ErrorName() string { return "RecommendRequestValidationError" }

// Error satisfies the builtin error interface
func (e RecommendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendRequestValidationError{}

// Validate checks the field values on RecommendResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecommendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendResponseMultiError, or nil if none found.
func (m *RecommendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Answer

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecommendResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecommendResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecommendResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecommendResponseMultiError(errors)
	}

	return nil
}

// RecommendResponseMultiError is an error wrapping multiple validation errors
// returned by RecommendResponse.ValidateAll() if the designated constraints
// aren't met.
type RecommendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendResponseMultiError) AllErrors() []error { return m }

// RecommendResponseValidationError is the validation error returned by
// RecommendResponse.Validate if the designated constraints aren't met.
type RecommendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendResponseValidationError) ErrorName() string {
	return "RecommendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendResponseValidationError{}
